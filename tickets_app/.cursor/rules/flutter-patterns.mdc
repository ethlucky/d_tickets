---
description:
globs:
alwaysApply: false
---
# Flutter开发模式规则

## 状态管理

### Provider模式

参考 [main.dart](mdc:lib/main.dart) 中的实现，使用Provider进行状态管理：

```dart
// 状态提供者
class SolanaProvider extends ChangeNotifier {
  // 私有状态变量
  bool _isLoading = false;
  String? _error;
  
  // 公共getter
  bool get isLoading => _isLoading;
  String? get error => _error;
  
  // 状态更新方法
  void _updateState() {
    notifyListeners();
  }
}

// 应用根部包装
ChangeNotifierProvider(
  create: (context) => SolanaProvider(),
  child: MaterialApp(...)
)

// 组件中使用
Consumer<SolanaProvider>(
  builder: (context, provider, child) {
    return Widget(...);
  }
)
```

### 异步操作模式

```dart
Future<void> performAsyncOperation() async {
  try {
    _isLoading = true;
    _error = null;
    notifyListeners();
    
    // 执行异步操作
    await someAsyncOperation();
    
  } catch (e) {
    _error = '操作失败: $e';
  } finally {
    _isLoading = false;
    notifyListeners();
  }
}
```

## UI组件模式

### 状态显示组件

```dart
// 连接状态指示器
Container(
  decoration: BoxDecoration(
    color: isConnected ? Colors.green.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
    borderRadius: BorderRadius.circular(8),
    border: Border.all(color: isConnected ? Colors.green : Colors.grey),
  ),
  child: Row(...)
)

// 错误信息显示
if (provider.error != null) ...[
  Container(
    decoration: BoxDecoration(
      color: Colors.red.withOpacity(0.1),
      border: Border.all(color: Colors.red),
    ),
    child: Text(provider.error!)
  ),
]

// 加载状态
if (provider.isLoading) ...[
  const CircularProgressIndicator(),
  const Text('处理中...'),
]
```

### 响应式布局

```dart
// 条件渲染
if (!provider.isLoading) ...[
  // 非加载状态的组件
] else ...[
  // 加载状态的组件
]

// 动态按钮状态
ElevatedButton.icon(
  onPressed: isEnabled ? () => performAction() : null,
  icon: const Icon(Icons.action),
  label: const Text('操作'),
)
```

## 国际化支持

- 所有用户界面文本使用中文
- 错误信息提供清晰的中文描述
- 状态提示使用友好的中文表达

## 代码组织

### 文件结构建议

```
lib/
├── main.dart              # 应用入口
├── models/               # 数据模型
├── providers/           # 状态管理
├── screens/            # 页面组件
├── widgets/           # 可复用组件
├── services/         # 服务层
└── utils/           # 工具函数
```

### 依赖管理

参考 [pubspec.yaml](mdc:pubspec.yaml)：
- 保持依赖版本的一致性
- 区分`dependencies`和`dev_dependencies`
- 使用具体版本号避免兼容性问题
